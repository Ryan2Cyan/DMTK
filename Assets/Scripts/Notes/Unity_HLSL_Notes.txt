HLSL in Unity:

Rendering in Unity:
-------------------------
    * Hierarchy: 3D Model -> MeshRenderer -> Material -> Shader
    * 3D Model: Contains (1) vertices, (2) vertex colors, (3) normals, (4) UV data.
    * GameObject: Contains a MeshRenderer with a Material. With the shader holds: (1) textures, (2) shader property
        values.
    * Shader: Uses 3D Model & Material data to draw pixels (with HLSL code). GPU program that draws triangles.
    * Shader Types:
        (1) Surface: Code generated approach.
        (2) Unlit: No interaction with Unity lights (e.g. special effects).
        (3) Image Effect: Read and modify source image(s) (postprocessing).
        (4) Compute: Run outside normal rendering pipeline. Used for massive parallel GPGPU algorithms or accelerate
            game rendering.
 
Writing Your First Shader in Unity:
-------------------------
    * Define shader path (path in inspector) - (e.g. Shader "Unlit/DMTK UI/UI Gradient").
    * ShaderLab: Unity's shader language.
    * Properties: Inspector user-set variables:
        Properties
        {
            // ShaderName: "_MainTex", InspectorName: "Texture": 
            _MainTex ("Texture", 2D) = "white" {}
        }
    * SubShader: Multiple for different platforms.
    * Tags: Interface with Unity Renderer.
    * Level of Detail (LOD): Changes depending on distance to player.
    * Shader stages represented as functions:
        (1) Vertex Function: Takes (potentially modifies [object space to clip space]) mesh vertices.
        (2) Fragment Function: Determines shape and colour of vertices.
    * Define pipeline stages with #pragma (e.g. #pragma fragment frag).
    * #include: Implements additional files.
    * Structs: Used to pass in data.
    * Semantic: Conveys input/output information:
        struct appdata
        {
            float4 vertex : POSITION;       // object-space vertex
            float2 uv : TEXCOORD0;          // texture-coordinates
        };

        struct v2f
        {
            float2 uv : TEXCOORD0;          // texture-coordinates
            float4 vertex : SV_POSITION;    // screen-space position
        };
    * Vertex Function: Takes appdata and returns a v2f struct:
        v2f vert (appdata v)
        {
            v2f o;                                          // Initialise vert-to-frag struct
            o.vertex = UnityObjectToClipPos(v.vertex);      // Convert object-space vertex into object-space
            o.uv = TRANSFORM_TEX(v.uv, _MainTex);           // Transform texture (tiling & offset also applied)
            return o;                                       // Return vert-to-frag struct
        }
    * Fragment Function: 
        
        
Vertex Function:
-------------------------
    * 
     
Shader Semantics:
-------------------------
    * Semantic: A string attached to a shader input/output conveying information. Required to pass between shader 
        stages - (e.g. vertex position = POSITION and texture coordinates = TEXCOORD).
    * System-Value Semantics (SV): Determines output/input of shader stage - (e.g. SV_Target in fragment shader
        will write pixels to a renderer). 
    * Fragment shader can output multiple colours to multiple targets (SV_Target0, SV_Target1, SV_Target2...etc). Z-
        buffer can be overridden with SV_Depth, can incur performance loss. Depth output is a single float. 
    
    CGPROGRAM
        #pragma vertex vert
        #pragma fragment frag
    
        // Inputs encapsulated within struct:
        struct v2f 
        {
            float2 uv : TEXCOORD0;
            float4 pos : SV_POSITION;
        };
    
        // Vertex shader:
        v2f vert(float4 vertex : POSITION, float2 uv : TEXCOORD0)
        {
            v2f o;
            o.pos = UnityObjectToClipPos(vertex);
            o.uv = uv;
            return o;
        }
    
        // Fragment shader: SV_Target indicates an output of a single color:
        fixed4 frag (v2f i) : SV_Target
        {
            // Returns a fixed4 (low precision RGBA color):
            return fixed4(i.uv, 0, 0);
        }
    ENDCG
    
Preprocessing Directives:
-------------------------
    * First stage of shader compilation, where preprocessor directives instruct the preprocessor.
    * #include: Include a HLSL file's contents. 
    * #include_with_pragmas: #include, permits sharing #pragma directives.
    * #pragma: HLSL preprocessor directive (additional info). Used in .shader files with #include, not
        #include_with_pragmas. Shader stages: (1) #pragma vertex <name>, (2) #pragma fragment <name>, 
        (3) #pragma geometry <name>, (4) #pragma hull <name>, (5) #pragma domain <name>.

Target Shader Models & GPU Features:
-------------------------
    * #pragma directives target GPU features. Unity can determine if the shader is compatible with user hardware. 
        Not specifying can lead to compile time errors.
    * Default: #pragma require derivatives (#pragma target 2.5).
    * Unity adds shader stages (e.g. #pragma geometry) to requirements.
    * Warning appears if requirements not met on shader compilation (Unity adds them in). To avoid (1) explicitly
        add requirements, (2) use appropriate target value in code.
    * '#pragma require' adds features to required - (e.g. '#pragma require integers mrt8'). Directives followed by 
        colons (':') can add shader keywords to specify which variants the requirement applies - (e.g. '#pragma 
        require integers mrt8 : EXAMPLE_KEYWORD OTHER_EXAMPLE_KEYWORD').
    * '#pragma target' specifies shader model - (e.g. #pragma target 4.0). Colons can specify when the target
        applies - (e.g. #pragma target 4.0 EXAMPLE_KEYWORD OTHER_EXAMPLE_KEYWORD).

Target Graphics APIs and Platforms:
-------------------------
   * '#pragma only_renderers' directive specifies how to compile shaders (e.g. Metal or Vulkan) - (e.g.
        #pragma only_renderers metal vulkan).
   * '#pragma exclude_renderers' to exclude a compilation.

Declaring and Using Shader Keywords:
-------------------------
    * Declare shader keywords with #pragma to change shader behaviour - (e.g. '#pragma shader_feature 
        REFLECTION_TYPE1 REFLECTION_TYPE2 REFLECTION_TYPE3').
    * Three directives: (1) shader_feature, (2) multi_compile, (3) dynamic_branch. 
    * You cannot: (1) include two with the same name, (2) include duplicates in a shader, (3) declare as both
        two directives (Unity will use dynamic_branch).
    
Vertex Shader Outputs and Fragment Shader Inputs:
-------------------------
    * Vertex shader output: Clip space position (on the screen) - SV_POSITION semantic, float4 type. Values are
        interpolated across triangle faces and passed into the fragment shader.
    * TEXCOORD (semantic): High-precision data (e.g. texture coordinates or positions).
    * COLOR (semantic): Low-precision vertex/fragment outputs (range 0 to 1).
    * Maximum interpolators from the vertex shader vary.

Other Special Semantics:
-------------------------
    * Screen space pixel position (VPOS): Needs '#pragma target 3.0'. For maximum portability use 'UNITY_VPOS_TYPE'
        (float4).  